----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date:    12:46:55 05/13/2014 
-- Design Name: 
-- Module Name:    Main - Behavioral 
-- Project Name: 
-- Target Devices: 
-- Tool versions: 
-- Description: 
--
-- Dependencies: 
--
-- Revision: 
-- Revision 0.01 - File Created
-- Additional Comments: 
--
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL; -- I have uncommented this one
--use IEEE.STD_LOGIC_ARITH.ALL;
--use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity adcdac is
port( 
		LED         :out std_logic_vector(7 downto 0);
		clk_50      :in std_logic;
		SPI_MISO    :in std_logic; --from adc to FPGA. Master Input, Slave Output. This is the serial data output of the adc to the FPGA. (N10)
		AD_CONV     :out std_logic; --from FPGA to adc. It is the triggering the analog-to-digital conversion. (P11, internal)
		AMP_CS      :out std_logic; --from FPGA to amp. It is an active low chip select signal. The gain is set when it goes high. (N7)
		SPI_MOSI    :out std_logic; --from FPGA to amp. Master Output, Slave Input. It presents the 8bit programmable gain settings. (T4)
		SPI_SCK     :inout std_logic; --from FPGA to amp/from FPGA to adc. SPI_MOSI and SPI_MISO send one bit at every rising edge of this clock. (U16)
		AMP_SHDN    :out std_logic; --from FPGA to amp. It is an active high reset signal. (P7)
		SPI_SS_B    :out std_logic; --DEACTIVATION
		SF_CE0      :out std_logic; --DEACTIVATION
		FPGA_INIT_B :out std_logic; --DEACTIVATION
		DAC_CLR     :out std_logic;
		DAC_CS      :out std_logic := '1'); --DEACTIVATION
end adcdac;

architecture Behavioral of adcdac is

	type state_type is (STARTUP, STARTUP_CLOCK, SETAMP, SETAMP_CLOCK, SETAMP_CLOCK_IDLE, IDLE, IDLE_CLOCK, START_AD, START_AD_CLOCK, ADC, ADC_CLOCK, ADC_CLOCK_FUNC, 
								FUNC, FUNC_CLOCK, SET, SET_CLOCK, SENDBIT, SENDBIT_CLOCK, SENDBIT_CLOCK_THEEND, THEEND, THEEND_CLOCK, THEEND_CLOCK_STARTUP);
	
	signal state: state_type := STARTUP;
	signal risingedge :std_logic := '1';
	signal clk_counter :integer range 0 to 25 := 0;
	signal ADC1 : signed (13 downto 0):= (others => '0');  -- Data from ADC1 (VIN A)
--   signal ADC2 : signed (13 downto 0):= (others => '0');  -- Data from ADC2 (VIN B)
	signal dacdata: signed(23 downto 0) := (others => '0');
	signal dacsend : signed(11 downto 0) := (others => '0');
 
	signal count1 : integer range 0 to 13; --14bits fot 1 ADC channel and + 2 zeros
	signal count2 : integer range 0 to 13; --14bits fot 2 ADC channel and + 2 zeros
	signal gaincount : integer range 0 to 7; --8bits for preamplifier signal.
	signal daccounter: integer range 0 to 24; --DAC counter for loop
	signal adccounter: integer range 0 to 34; --34 spi_sck cycles for an entire ADC-loop.
	
	constant number_int: integer := 2;
	signal number_sig: signed (11 downto 0) := ( others=> '1');
	signal waiting: integer range 0 to 32 := 0;
	signal dactest: signed(11 downto 0) := (others => '0');
	signal clock_count_slow: integer range 0 to 1 := 0;
	signal clock_count_fast: integer range 0 to 1 := 0;
	signal ClockClock : std_logic;
	
--	signal count1and2 : integer range 0 to 1 := 0;
--	signal enable_read : std_logic := '0';
--	signal rising_falling_counter : std_logic := '0';
	
--	signal outcount : integer range 0 to 2 := 0;
	
--	constant MAXDIG  : real := real(2 ** 14);
--	constant VREF    : real := 1.65;--2.43;  -- or whatever you have as a reference
--	constant analog    : real := 0.5;   -- analog voltage into converter
--	signal adcval    : signed(13 downto 0);
--
begin

--adcval <= to_signed(integer(MAXDIG * analog / VREF), 14); 

--This is a clock devider in order to get a 2MHz clock.
process(clk_50)
begin
	if rising_edge(clk_50) then
		if (clk_counter = 12) then
			risingedge <= risingedge xor '1';
			clk_counter <= 0;
		else
			clk_counter <= clk_counter + 1;
		end if;
	end if;
end process;

ClockClock <= risingedge;

--This is in order to deactivate other functions that the SPI has.
SPI_SS_B <= '1';
SF_CE0 <= '1';
FPGA_INIT_B <= '1';
--AMP_CS <= '1';


process(ClockClock)

	constant gain : std_logic_vector(7 downto 0) := "00010001"; --This is the gain of the A and B preamplifiers corresponding to A and B ADCs. (0, 0)
	
begin
		if rising_edge(ClockClock) then
				
				
--				if clock_count_fast = 0 then
--					clock_count_fast <= 1;
					

				case state is	
						when STARTUP => 
							spi_sck <= '0';
--							if dactest = 4095 then
--								dactest <= 0;
--							else
--								dactest <= dactest + 1;
--							end if;
								gaincount <= 7;
								DAC_CLR <= '1';
								AMP_CS <= '1'; 
								AD_CONV <= '1';
								DAC_CS <= '1';
								AMP_SHDN <= '0';
								state <= STARTUP_CLOCK;

						when STARTUP_CLOCK =>
								spi_sck <= '1';
								state <= SETAMP;
								
				
						when SETAMP => --amplifier gain is set.
--								AMP_SHDN <= '0'; 
--								DAC_CLR <= '1';
--								AMP_CS <= '1'; 
--								AD_CONV <= '1';
--								DAC_CS <= '1';
--								AMP_CS <= '0'; 
								spi_sck <= '0';
							if gaincount = 0 then
								SPI_MOSI <= gain(gaincount);
								state <= SETAMP_CLOCK_IDLE;
							else
								AMP_CS <= '0';
								SPI_MOSI <= gain(gaincount);
								gaincount <= gaincount - 1;
								state <= SETAMP_CLOCK;
							end if;
							
						when SETAMP_CLOCK =>
								spi_sck <= '1';
								state <= SETAMP;
								
						when SETAMP_CLOCK_IDLE =>
								spi_sck <= '1';
								state <= IDLE;
								
						
						when IDLE => 
--							if dactest = 4095 then
--								dactest <= 0;
--							else
								spi_sck <= '0';
								dactest <= dactest + 1;
--							end if;
								gaincount <= 7;
								DAC_CLR <= '1';
								AMP_CS <= '1'; 
								AD_CONV <= '0';
								DAC_CS <= '1';
								state <= IDLE_CLOCK; 
								
							when IDLE_CLOCK =>
								spi_sck <= '1';
								state <= START_AD;
						
									
--						when SETAMP => --amplifier gain is set.
--								AMP_SHDN <= '0'; 
----								AMP_CS <= '0'; 
--							if gaincount = 0 then
--								SPI_MOSI <= gain(gaincount);
--								state <= START_AD;
--							else
--								AMP_CS <= '0';
--								SPI_MOSI <= gain(gaincount);
--								gaincount <= gaincount - 1;
--								state <= SETAMP;
--							end if;
							
						when START_AD => --analog-to-digital conversion starts.
								AMP_SHDN <= '0';
								spi_sck <= '0';
								AMP_CS <= '1';
								AD_CONV <= '1'; 
								adccounter <= 0; 
								count1 <= 13; 
								count2 <= 13;	
								state <= START_AD_CLOCK; 
								
						when START_AD_CLOCK =>
								spi_sck <= '1';
								state <= ADC;
				
							when ADC =>
								AD_CONV <= '0';
								spi_sck <= '0';
								if adccounter <= 2 then --(0,1,2)
									adccounter <= adccounter + 1;
									state <= ADC_CLOCK;
								elsif adccounter > 2 and adccounter <= 16 then
									adccounter <= adccounter + 1;--(3,4,5,6,7,8,9,10,11,12,13,14,15,16)
									ADC1(count1) <= SPI_MISO;
									count1 <= count1 - 1;
									state <= ADC_CLOCK;
								elsif adccounter > 16 and adccounter <= 18 then --(17,18)
									adccounter <= adccounter + 1;
									state <= ADC_CLOCK;
								elsif adccounter > 18 and adccounter <= 32 then
									adccounter <= adccounter + 1;--(19,20,21,22,23,24,25,26,27,28,29,30,31,32)
									ADC1(count2) <= SPI_MISO;
									count2 <= count2 - 1;
									state <= ADC_CLOCK;
								elsif adccounter = 33 then
									adccounter <= adccounter + 1;
									state <= ADC_CLOCK_FUNC;								
								end if;
								
							when ADC_CLOCK =>
								spi_sck <= '1';
								state <= ADC;
								
							when ADC_CLOCK_FUNC =>
								spi_sck <= '1';
								state <= FUNC;
					
						 
				
						when FUNC =>
							AD_CONV <= '1';
							spi_sck <= '0';
--							AMP_SHDN <= '1';
--							if count1and2 = 0 then
								number_sig <= to_signed(number_int, 12);
								dacsend <= resize(ADC1, 12);
--								dacsend(0) <= ADC1(0);
--								dacsend(1) <= ADC1(1);
--								dacsend(2) <= ADC1(2);
--								dacsend(3) <= ADC1(3);
--								dacsend(4) <= ADC1(4);
--								dacsend(5) <= ADC1(5);
--								dacsend(6) <= ADC1(6);
--								dacsend(7) <= ADC1(7);
--								dacsend(8) <= ADC1(8);
--								dacsend(9) <= ADC1(9);
--								dacsend(10) <= ADC1(10);
--								dacsend(11) <= ADC1(11);
							
							
								
								
--								count1and2 <= count1and2 + 1;
								state <= FUNC_CLOCK;
--							elsif count1and2 = 1 then
--								number_sig <= to_signed(number_int,12);
--								dacsend <= resize(ADC2 * number_sig, 12);
--								count1and2 <= count1and2 - 1;
--								state <= SET;
--							end if;

						when FUNC_CLOCK =>
								spi_sck <= '1';
								state <= SET;
							
						when SET =>
								spi_sck <= '0';
--								dacdata <= "00000000" & "0011" & "1111" & "000000000000" & "0000"; -- (x8)zeros + (x4)command + (x4)adress + (x12)data + (x4)zeros 101010101010  000000000000
								dacdata <= "0011" & "1111" & dacsend & "0000"; -- (x8)zeros + (x4)command + (x4)adress + (x12)data + (x4)zeros 101010101010  000000000000 111111111111

--								dacdata <= "0000" & "000000000000" & "1111" & "1100" & "00000000";
								SPI_MOSI <= '0';
								daccounter <= 24;
								DAC_CLR <= '1';
								
								state <= SET_CLOCK;
								
						when SET_CLOCK =>
								spi_sck <= '1';
								state <= SENDBIT;
								
						when SENDBIT =>
							DAC_CS <= '0';
							spi_sck <= '0';
--							DAC_CLR <= '1';
							if daccounter = 0 then
								waiting <= 0;
								DAC_CS <= '1';
								state <= SENDBIT_CLOCK_THEEND;
							elsif daccounter > 0 then
								SPI_MOSI <= dacdata(daccounter-1);
								daccounter <= daccounter - 1;
								state <= SENDBIT_CLOCK;
							end if;
							
						when SENDBIT_CLOCK =>
								spi_sck <= '1';
								state <= SENDBIT;
								
						when SENDBIT_CLOCK_THEEND =>
								spi_sck <= '1';
								state <= THEEND;
							
						when THEEND =>
								spi_sck <= '0';
								LED(0) <= ADC1(0);
								LED(1) <= ADC1(12);
								LED(2) <= ADC1(11);
								LED(3) <= ADC1(10);
								LED(4) <= ADC1(9);
								LED(5) <= ADC1(8);
								LED(6) <= ADC1(7);
								LED(7) <= ADC1(6);
								DAC_CS <= '1';
								ADC1 <= (others => '0');
--								ADC2 <= (others => '0');
								dacsend <= (others => '0');
								dacdata <= (others => '0');
								number_sig <= (others => '0');
								SPI_SS_B <= '1';
								SF_CE0 <= '1';
								FPGA_INIT_B <= '1';
								
							if waiting < 32 then
								waiting <= waiting + 1;
								state <= THEEND_CLOCK;
							elsif waiting =32 then
--								DAC_CS <= '1';
							state <= THEEND_CLOCK_STARTUP;
							end if;
							
						when THEEND_CLOCK =>
								spi_sck <= '1';
								state <= THEEND;
								
						when THEEND_CLOCK_STARTUP =>
								spi_sck <= '1';
								state <= IDLE;
								
	
			end case;
--		elsif clock_count_fast = 1 then
--			clock_count_fast <= 0;
--			if clock_count_slow = 0 then
--				clock_count_slow <= 1;
--				spi_sck <= '0';
--			else
--				clock_count_slow <= 0;
--				spi_sck <= '1';
--			end if;
--			clock_count_slow <= clock_count_slow + 1;
		end if;
			


end process;

end Behavioral;

